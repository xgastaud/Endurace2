{"ast":null,"code":"import GMaps from 'gmaps/gmaps.js'; // var marker = new google.maps.Marker({\n//     position: myLatlng,\n//     title:\"Hello World!\",\n//     icon: 'flag.png',\n// });\n// marker.setMap(map);\n\nconst mapElement = document.getElementById('map');\n\nif (mapElement) {\n  // don't try to build a map if there's no div#map to inject in\n  const map = new GMaps({\n    el: '#map',\n    lat: 0,\n    lng: 0\n  });\n  const markers = JSON.parse(mapElement.dataset.markers);\n  const styles = [{\n    \"featureType\": \"landscape.man_made\",\n    \"elementType\": \"geometry\",\n    \"stylers\": [{\n      \"color\": \"#f7f1df\"\n    }]\n  }, {\n    \"featureType\": \"landscape.natural\",\n    \"elementType\": \"geometry\",\n    \"stylers\": [{\n      \"color\": \"#d0e3b4\"\n    }]\n  }, {\n    \"featureType\": \"landscape.natural.terrain\",\n    \"elementType\": \"geometry\",\n    \"stylers\": [{\n      \"visibility\": \"off\"\n    }]\n  }, {\n    \"featureType\": \"poi\",\n    \"elementType\": \"labels\",\n    \"stylers\": [{\n      \"visibility\": \"off\"\n    }]\n  }, {\n    \"featureType\": \"poi.business\",\n    \"elementType\": \"all\",\n    \"stylers\": [{\n      \"visibility\": \"off\"\n    }]\n  }, {\n    \"featureType\": \"poi.medical\",\n    \"elementType\": \"geometry\",\n    \"stylers\": [{\n      \"color\": \"#fbd3da\"\n    }]\n  }, {\n    \"featureType\": \"poi.park\",\n    \"elementType\": \"geometry\",\n    \"stylers\": [{\n      \"color\": \"#bde6ab\"\n    }]\n  }, {\n    \"featureType\": \"road\",\n    \"elementType\": \"geometry.stroke\",\n    \"stylers\": [{\n      \"visibility\": \"off\"\n    }]\n  }, {\n    \"featureType\": \"road\",\n    \"elementType\": \"labels\",\n    \"stylers\": [{\n      \"visibility\": \"off\"\n    }]\n  }, {\n    \"featureType\": \"road.highway\",\n    \"elementType\": \"geometry.fill\",\n    \"stylers\": [{\n      \"color\": \"#ffe15f\"\n    }]\n  }, {\n    \"featureType\": \"road.highway\",\n    \"elementType\": \"geometry.stroke\",\n    \"stylers\": [{\n      \"color\": \"#efd151\"\n    }]\n  }, {\n    \"featureType\": \"road.arterial\",\n    \"elementType\": \"geometry.fill\",\n    \"stylers\": [{\n      \"color\": \"#ffffff\"\n    }]\n  }, {\n    \"featureType\": \"road.local\",\n    \"elementType\": \"geometry.fill\",\n    \"stylers\": [{\n      \"color\": \"black\"\n    }]\n  }, {\n    \"featureType\": \"transit.station.airport\",\n    \"elementType\": \"geometry.fill\",\n    \"stylers\": [{\n      \"color\": \"#cfb2db\"\n    }]\n  }, {\n    \"featureType\": \"water\",\n    \"elementType\": \"geometry\",\n    \"stylers\": [{\n      \"color\": \"#a2daf2\"\n    }]\n  }];\n  map.addMarkers(markers);\n  map.addStyle({\n    styles: styles,\n    mapTypeId: 'map_style'\n  });\n  map.setStyle('map_style');\n\n  if (markers.length === 0) {\n    map.setZoom(2);\n  } else if (markers.length === 1) {\n    map.setCenter(markers[0].lat, markers[0].lng);\n    map.setZoom(14);\n  } else {\n    map.fitLatLngBounds(markers);\n  }\n}\n\nimport { autocomplete } from '../components/autocomplete'; // [...]\n\nautocomplete();","map":{"version":3,"sources":["/Users/xgastaud/code/xgastaud/endurace2/app/javascript/packs/map.js"],"names":["GMaps","mapElement","document","getElementById","map","el","lat","lng","markers","JSON","parse","dataset","styles","addMarkers","addStyle","mapTypeId","setStyle","length","setZoom","setCenter","fitLatLngBounds","autocomplete"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,gBAAlB,C,CAEA;AACA;AACA;AACA;AACA;AAEA;;AACA,MAAMC,UAAU,GAAGC,QAAQ,CAACC,cAAT,CAAwB,KAAxB,CAAnB;;AACA,IAAIF,UAAJ,EAAgB;AAAE;AAChB,QAAMG,GAAG,GAAG,IAAIJ,KAAJ,CAAU;AAAEK,IAAAA,EAAE,EAAE,MAAN;AAAcC,IAAAA,GAAG,EAAE,CAAnB;AAAsBC,IAAAA,GAAG,EAAE;AAA3B,GAAV,CAAZ;AACA,QAAMC,OAAO,GAAGC,IAAI,CAACC,KAAL,CAAWT,UAAU,CAACU,OAAX,CAAmBH,OAA9B,CAAhB;AACA,QAAMI,MAAM,GAAG,CACb;AACI,mBAAe,oBADnB;AAEI,mBAAe,UAFnB;AAGI,eAAW,CACP;AACI,eAAS;AADb,KADO;AAHf,GADa,EAUb;AACI,mBAAe,mBADnB;AAEI,mBAAe,UAFnB;AAGI,eAAW,CACP;AACI,eAAS;AADb,KADO;AAHf,GAVa,EAmBb;AACI,mBAAe,2BADnB;AAEI,mBAAe,UAFnB;AAGI,eAAW,CACP;AACI,oBAAc;AADlB,KADO;AAHf,GAnBa,EA4Bb;AACI,mBAAe,KADnB;AAEI,mBAAe,QAFnB;AAGI,eAAW,CACP;AACI,oBAAc;AADlB,KADO;AAHf,GA5Ba,EAqCb;AACI,mBAAe,cADnB;AAEI,mBAAe,KAFnB;AAGI,eAAW,CACP;AACI,oBAAc;AADlB,KADO;AAHf,GArCa,EA8Cb;AACI,mBAAe,aADnB;AAEI,mBAAe,UAFnB;AAGI,eAAW,CACP;AACI,eAAS;AADb,KADO;AAHf,GA9Ca,EAuDb;AACI,mBAAe,UADnB;AAEI,mBAAe,UAFnB;AAGI,eAAW,CACP;AACI,eAAS;AADb,KADO;AAHf,GAvDa,EAgEb;AACI,mBAAe,MADnB;AAEI,mBAAe,iBAFnB;AAGI,eAAW,CACP;AACI,oBAAc;AADlB,KADO;AAHf,GAhEa,EAyEb;AACI,mBAAe,MADnB;AAEI,mBAAe,QAFnB;AAGI,eAAW,CACP;AACI,oBAAc;AADlB,KADO;AAHf,GAzEa,EAkFb;AACI,mBAAe,cADnB;AAEI,mBAAe,eAFnB;AAGI,eAAW,CACP;AACI,eAAS;AADb,KADO;AAHf,GAlFa,EA2Fb;AACI,mBAAe,cADnB;AAEI,mBAAe,iBAFnB;AAGI,eAAW,CACP;AACI,eAAS;AADb,KADO;AAHf,GA3Fa,EAoGb;AACI,mBAAe,eADnB;AAEI,mBAAe,eAFnB;AAGI,eAAW,CACP;AACI,eAAS;AADb,KADO;AAHf,GApGa,EA6Gb;AACI,mBAAe,YADnB;AAEI,mBAAe,eAFnB;AAGI,eAAW,CACP;AACI,eAAS;AADb,KADO;AAHf,GA7Ga,EAsHb;AACI,mBAAe,yBADnB;AAEI,mBAAe,eAFnB;AAGI,eAAW,CACP;AACI,eAAS;AADb,KADO;AAHf,GAtHa,EA+Hb;AACI,mBAAe,OADnB;AAEI,mBAAe,UAFnB;AAGI,eAAW,CACP;AACI,eAAS;AADb,KADO;AAHf,GA/Ha,CAAf;AA0IAR,EAAAA,GAAG,CAACS,UAAJ,CAAeL,OAAf;AACAJ,EAAAA,GAAG,CAACU,QAAJ,CAAa;AACXF,IAAAA,MAAM,EAAEA,MADG;AAEXG,IAAAA,SAAS,EAAE;AAFA,GAAb;AAIAX,EAAAA,GAAG,CAACY,QAAJ,CAAa,WAAb;;AACE,MAAIR,OAAO,CAACS,MAAR,KAAmB,CAAvB,EAA0B;AACxBb,IAAAA,GAAG,CAACc,OAAJ,CAAY,CAAZ;AACD,GAFD,MAEO,IAAIV,OAAO,CAACS,MAAR,KAAmB,CAAvB,EAA0B;AAC/Bb,IAAAA,GAAG,CAACe,SAAJ,CAAcX,OAAO,CAAC,CAAD,CAAP,CAAWF,GAAzB,EAA8BE,OAAO,CAAC,CAAD,CAAP,CAAWD,GAAzC;AACAH,IAAAA,GAAG,CAACc,OAAJ,CAAY,EAAZ;AACD,GAHM,MAGA;AACLd,IAAAA,GAAG,CAACgB,eAAJ,CAAoBZ,OAApB;AACD;AACF;;AAGH,SAASa,YAAT,QAA6B,4BAA7B,C,CAEA;;AACAA,YAAY","sourcesContent":["import GMaps from 'gmaps/gmaps.js';\n\n// var marker = new google.maps.Marker({\n//     position: myLatlng,\n//     title:\"Hello World!\",\n//     icon: 'flag.png',\n// });\n\n// marker.setMap(map);\nconst mapElement = document.getElementById('map');\nif (mapElement) { // don't try to build a map if there's no div#map to inject in\n  const map = new GMaps({ el: '#map', lat: 0, lng: 0 });\n  const markers = JSON.parse(mapElement.dataset.markers);\n  const styles = [\n    {\n        \"featureType\": \"landscape.man_made\",\n        \"elementType\": \"geometry\",\n        \"stylers\": [\n            {\n                \"color\": \"#f7f1df\"\n            }\n        ]\n    },\n    {\n        \"featureType\": \"landscape.natural\",\n        \"elementType\": \"geometry\",\n        \"stylers\": [\n            {\n                \"color\": \"#d0e3b4\"\n            }\n        ]\n    },\n    {\n        \"featureType\": \"landscape.natural.terrain\",\n        \"elementType\": \"geometry\",\n        \"stylers\": [\n            {\n                \"visibility\": \"off\"\n            }\n        ]\n    },\n    {\n        \"featureType\": \"poi\",\n        \"elementType\": \"labels\",\n        \"stylers\": [\n            {\n                \"visibility\": \"off\"\n            }\n        ]\n    },\n    {\n        \"featureType\": \"poi.business\",\n        \"elementType\": \"all\",\n        \"stylers\": [\n            {\n                \"visibility\": \"off\"\n            }\n        ]\n    },\n    {\n        \"featureType\": \"poi.medical\",\n        \"elementType\": \"geometry\",\n        \"stylers\": [\n            {\n                \"color\": \"#fbd3da\"\n            }\n        ]\n    },\n    {\n        \"featureType\": \"poi.park\",\n        \"elementType\": \"geometry\",\n        \"stylers\": [\n            {\n                \"color\": \"#bde6ab\"\n            }\n        ]\n    },\n    {\n        \"featureType\": \"road\",\n        \"elementType\": \"geometry.stroke\",\n        \"stylers\": [\n            {\n                \"visibility\": \"off\"\n            }\n        ]\n    },\n    {\n        \"featureType\": \"road\",\n        \"elementType\": \"labels\",\n        \"stylers\": [\n            {\n                \"visibility\": \"off\"\n            }\n        ]\n    },\n    {\n        \"featureType\": \"road.highway\",\n        \"elementType\": \"geometry.fill\",\n        \"stylers\": [\n            {\n                \"color\": \"#ffe15f\"\n            }\n        ]\n    },\n    {\n        \"featureType\": \"road.highway\",\n        \"elementType\": \"geometry.stroke\",\n        \"stylers\": [\n            {\n                \"color\": \"#efd151\"\n            }\n        ]\n    },\n    {\n        \"featureType\": \"road.arterial\",\n        \"elementType\": \"geometry.fill\",\n        \"stylers\": [\n            {\n                \"color\": \"#ffffff\"\n            }\n        ]\n    },\n    {\n        \"featureType\": \"road.local\",\n        \"elementType\": \"geometry.fill\",\n        \"stylers\": [\n            {\n                \"color\": \"black\"\n            }\n        ]\n    },\n    {\n        \"featureType\": \"transit.station.airport\",\n        \"elementType\": \"geometry.fill\",\n        \"stylers\": [\n            {\n                \"color\": \"#cfb2db\"\n            }\n        ]\n    },\n    {\n        \"featureType\": \"water\",\n        \"elementType\": \"geometry\",\n        \"stylers\": [\n            {\n                \"color\": \"#a2daf2\"\n            }\n        ]\n    }\n];\n\n  map.addMarkers(markers);\n  map.addStyle({\n    styles: styles,\n    mapTypeId: 'map_style'\n  });\n  map.setStyle('map_style');\n    if (markers.length === 0) {\n      map.setZoom(2);\n    } else if (markers.length === 1) {\n      map.setCenter(markers[0].lat, markers[0].lng);\n      map.setZoom(14);\n    } else {\n      map.fitLatLngBounds(markers);\n    }\n  }\n\n\nimport { autocomplete } from '../components/autocomplete';\n\n// [...]\nautocomplete();\n"]},"metadata":{},"sourceType":"module"}